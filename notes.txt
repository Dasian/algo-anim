manim -pql scene.py CreateCircle
-p means play
-ql is quality low
-qh is quality high
-qm is medium
-qk is 4k

animations can be done dynamically

mobjects are by default placed at the origin (center)

sections can be used to produce a different output video
at least one animation is needed in each section
--save_sections needs to be added
--save_sections scene.py

-a: render all Scene classes in a file 
-i: animations are .gif instead of .mp4


make a graph search algorithm
- make the edges not cross each other
- grey starting nodes
- yellow working nodes
- red visted nodes
- green found node

**Graph Animations**
Core (ordered):
design/steal graph class
display the graph
implement graph algos
animate graph algos

Quality of Life:
randomly generate graph
- start with a node
- randomly generate a number
- add that many nodes to this node
- repeat for each generated node
- repeat for how many levels
- randomly connect nodes on the same level
- randomly connect nodes on upper levels, never lower?
- bfs generation basically
make it planar
find which start and end nodes have the longest path/most steps
before animation occurs (increase animation time)
generate graphs to be animated while animating
have a loop so graph animations will be generated, animated,
and queued, async stuff for efficiency

TODO:
make all nodes connected to at least one other node
be able to print out a randomly generated graph
create a static graph traversal animation

1.21.23
Hey again. This project is kinda messy and I feel like working on it again.
I'm going to comb throught it all and write down the current capabilities and
where I want to go with it all.

I can currently create and print a randomly generated graph using matplot and networkx
The graph creation can also be animated using those libraries
These capabilities are located in graphs/main.py and don't use the created graph classes

I want to port this to a better animation library like manim. I'm assuming main.py is
only used for testing. Or at least that's the way I'm going to use it for now.

What you should try to do first is find an algo for generating planar graphs.
Or you can make your own, maybe add variations to the ones you find.
Then maybe try to figure out how to generate these graphs and these scenes
into manim.

1.22.23
Got some algos for planar graph generation. I'll implement them, but then I need to
figure out how to print them out in a nice way.

Next you need to figure out how to print a simple graph in manim. After that, you
can try to put a generated graph in manim. Or you could figure out how to animate
a static example for bfs. The next two steps seem interchangeable but both need to
be completed to reach your goal.

1.23.23
Goal rn is to create a static bfs animation scene and then figure out how add 
dynamic generation to it.

1.24.23
Worked a lot on the animation states. I revised a lot of the graph data 
stucture and changed the bfs animation steps. I haven't gotten around to 
testing yet though. There are some bugs I need to work out when I mark the
currently processed path. When a node/edge aren't part of the process path,
I need to have code that change it back to a visited state.
